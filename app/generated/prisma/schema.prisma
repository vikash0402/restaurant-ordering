// This is your Prisma schema file,
// Learn more at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password_hash String
  createdAt     DateTime @default(now())
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int
  author    User    @relation(fields: [authorId], references: [id])
}

model Customer {
  id           Int      @id @default(autoincrement())
  name         String
  phone_number String   @unique
  orders       Order[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuItems   MenuItem[]
}

model MenuItem {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  image_url   String?
  available   Boolean     @default(true)
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  createdAt   DateTime    @default(now())
  orderItems  OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model Order {
  id              Int           @id @default(autoincrement())
  customerId      Int
  customer        Customer      @relation(fields: [customerId], references: [id])
  status          OrderStatus   @default(PENDING)
  total_amount    Float
  platform_charge Float
  sms_charge      Float
  delivery_charge Float
  orderItems      OrderItem[]
  payment_status  Boolean       @default(false)
  createdAt       DateTime      @default(now())
  transactions    Transaction[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  quantity   Int
  unit_price Float
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId Int
  item       MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Transaction {
  id                  Int         @id @default(autoincrement())
  orderId             Int
  order               Order       @relation(fields: [orderId], references: [id])
  rozer_transation_id String
  amount              Float
  status              OrderStatus @default(PENDING)
  createdAt           DateTime    @default(now())
}
